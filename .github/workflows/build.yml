name: 'Build and Deploy'

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'What to build/deploy'
        required: true
        type: choice
        options:
          - client
          - server
          - docs
  push:
    branches:
      - main

jobs:
  build-and-deploy-client:
    name: Build and Deploy /client
    if: >
      (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'client') ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'chore(build/client): trigger build action'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.BUILD_WEBHOOK_URL }}
          embed-title: 'Deployment Notification'
          embed-description: 'Deployment triggered. Proceeding with build and restart.'
          embed-footer-text: 'discord.place'
          embed-color: 14194756
        if: always() # Run this step regardless of the outcome of previous steps

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        if: always() # Run this step regardless of the outcome of previous steps

      - name: Deploy to Server
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -T -o StrictHostKeyChecking=accept-new -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" << 'EOF' > /dev/null 2>&1
            # Exit on any error
            set -e
            
            # Setup logging
            LOG_FILE="/tmp/discord-place-client-deploy-$(date +%Y%m%d_%H%M%S).log"
            exec > >(tee -a "$LOG_FILE") 2>&1
            
            echo "=== discord.place Client Deployment Started at $(date) ==="
            echo "Log file: $LOG_FILE"
            
            echo "Updating source code..."
            cd discord.place/client
            git pull origin main
            
            echo "Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use $(nvm current)
            
            TEMP_DIR="/tmp/discord-place-client-build-$(date +%s)"
            echo "Creating temporary build directory: $TEMP_DIR"
            mkdir -p "$TEMP_DIR"
            
            echo "Copying client files to temporary directory..."
            rsync -av --exclude='.next' --exclude='.git' --exclude='node_modules' . "$TEMP_DIR/"

            echo "Installing dependencies in temporary directory..."
            cd "$TEMP_DIR"
            pnpm install --frozen-lockfile
            
            echo "Building application in temporary directory..."
            cd "$TEMP_DIR"
            pnpm build

            echo "Stopping application..."
            pm2 stop discord.place
            
            echo "Replacing .next folder in production directory..."
            cd /root/discord.place/client
            rm -rf .next
            mv "$TEMP_DIR/.next" ./
            
            echo "Updating production dependencies..."
            pnpm install --frozen-lockfile
            
            echo "Starting application..."
            pm2 restart discord.place
            
            echo "Cleaning up temporary directory..."
            rm -rf "$TEMP_DIR"
            
            echo "=== Discord.place Client Deployment Completed Successfully at $(date) ==="
            echo "Log file saved to: $LOG_FILE"
          EOF
        if: always() # Run this step regardless of the outcome of previous steps

      - uses: chimpdev/bark-github-action@v1.0.1
        with:
            device_key: ${{ secrets.BARK_KEY }}
            server_url: ${{ secrets.BARK_SERVER_URL }}
            title: '${{ github.repository }}'
            body: 'Client Build and Deploy triggered and completed. Job is ${{ job.status }}.'
            url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            icon: 'https://i.ibb.co/7d8rL1c3/Git-Hub-Mark-ea2971cee799.jpg'
        if: always() # Run this step regardless of the outcome of previous steps

  build-and-deploy-server:
    name: Build and Deploy /server
    if: >
      (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'server') ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'chore(build/server): trigger build action'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.BUILD_WEBHOOK_URL }}
          embed-title: 'Deployment Notification'
          embed-description: 'Deployment triggered. Proceeding with restart.'
          embed-footer-text: 'api.discord.place'
          embed-color: 14194756
        if: always() # Run this step regardless of the outcome of previous steps
      
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to Server
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -T -o StrictHostKeyChecking=accept-new -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" << 'EOF' > /dev/null 2>&1
            cd discord.place/server
            git pull origin main > /dev/null 2>&1
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use $(nvm current)
            pnpm install > /dev/null 2>&1
            pm2 restart api.discord.place > /dev/null 2>&1
          EOF

      - uses: chimpdev/bark-github-action@v1.0.1
        with:
            device_key: ${{ secrets.BARK_KEY }}
            server_url: ${{ secrets.BARK_SERVER_URL }}
            title: '${{ github.repository }}'
            body: 'Server Build and Deploy triggered and completed. Job is ${{ job.status }}.'
            url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            icon: 'https://i.ibb.co/7d8rL1c3/Git-Hub-Mark-ea2971cee799.jpg'
        if: always() # Run this step regardless of the outcome of previous steps

  build-and-deploy-docs:
    name: Build and Deploy /docs
    if: >
      (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'docs') ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'chore(build/docs): trigger build action'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.BUILD_WEBHOOK_URL }}
          embed-title: 'Deployment Notification'
          embed-description: 'Deployment triggered. Proceeding with build and restart.'
          embed-footer-text: 'docs.discord.place'
          embed-color: 14194756
        if: always()

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        if: always()

      - name: Deploy to Server
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -T -o StrictHostKeyChecking=accept-new -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" << 'EOF' > /dev/null 2>&1
            set -e

            LOG_FILE="/tmp/discord-place-docs-deploy-$(date +%Y%m%d_%H%M%S).log"
            exec > >(tee -a "$LOG_FILE") 2>&1

            echo "=== discord.place Docs Deployment Started at $(date) ==="
            echo "Log file: $LOG_FILE"

            echo "Updating source code..."
            cd discord.place/docs
            git pull origin main

            echo "Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use $(nvm current)

            TEMP_DIR="/tmp/discord-place-docs-build-$(date +%s)"
            echo "Creating temporary build directory: $TEMP_DIR"
            mkdir -p "$TEMP_DIR"

            echo "Copying docs files to temporary directory..."
            rsync -av --exclude='.git' --exclude='node_modules' . "$TEMP_DIR/"

            echo "Installing dependencies in temporary directory..."
            cd "$TEMP_DIR"
            pnpm install --frozen-lockfile

            echo "Building docs in temporary directory..."
            pnpm build

            echo "Stopping docs application..."
            pm2 stop docs.discord.place

            echo "Replacing build folder in production directory..."
            cd /root/discord.place/docs
            rm -rf .next  # or the equivalent build folder if different
            mv "$TEMP_DIR/.next" ./

            echo "Updating production dependencies..."
            pnpm install --frozen-lockfile

            echo "Starting docs application..."
            pm2 restart docs.discord.place

            echo "Cleaning up temporary directory..."
            rm -rf "$TEMP_DIR"

            echo "=== discord.place Docs Deployment Completed Successfully at $(date) ==="
            echo "Log file saved to: $LOG_FILE"
          EOF
        if: always()

      - uses: chimpdev/bark-github-action@v1.0.1
        with:
            device_key: ${{ secrets.BARK_KEY }}
            server_url: ${{ secrets.BARK_SERVER_URL }}
            title: '${{ github.repository }}'
            body: 'Docs Build and Deploy triggered and completed. Job is ${{ job.status }}.'
            url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            icon: 'https://i.ibb.co/7d8rL1c3/Git-Hub-Mark-ea2971cee799.jpg'
        if: always()